{"version":3,"sources":["ShowTime.js","Todolist/Todoing.js","Todolist/Todoinput.js","Todolist/Todolist.js","Request.js","index.js"],"names":["Component","Todoing","this","props","a","className","todo","map","item","idx","key","onClick","delTodo","defaultProps","Todoinput","handleInput","e","keyCode","addTodo","target","value","handleChange","setState","name","parseInt","state","n1","n2","style","color","fontSize","htmlFor","id","onChange","onKeyDown","type","dangerouslySetInnerHTML","__html","Request","data","Axios","get","then","res","console","log","result","index","album_title","author","ReactDOM","render","document","getElementById","React","createElement"],"mappings":"gQAEsCA,Y,MCAjBC,E,iLACP,IAAD,OACL,OACI,6BACI,uDAASC,KAAKC,MAAMC,GACpB,wBAAIC,UAAU,QAENH,KAAKC,MAAMG,KAAKC,KAAI,SAACC,EAAKC,GAAN,OAAY,wBAAIC,IAAKD,GAAMD,EAAf,OAAwB,4BAAQG,QAAS,WAAK,EAAKR,MAAMS,QAAQH,KAAzC,0B,GAP3CT,aAiBrCC,EAAQY,aAAe,CACnBP,KAAM,CAAC,EAAE,EAAE,GACXF,EAAG,K,YCMcU,E,YACjB,aAAc,IAAD,8BACT,+CAMJC,YAAc,SAACC,GACM,KAAdA,EAAEC,SACD,EAAKd,MAAMe,QAAQF,EAAEG,OAAOC,QATvB,EAYbC,aAAe,SAACL,GACZ,EAAKM,SAAL,eACKN,EAAEG,OAAOI,KAAOC,SAA0B,KAAjBR,EAAEG,OAAOC,MAAW,EAAEJ,EAAEG,OAAOC,UAZ7D,EAAKK,MAAQ,CACTC,GAAI,EACJC,GAAI,GAJC,E,sEAiBH,IAAD,OACL,OACI,6BACI,2BAAOC,MAAO,CACVC,MAAM3B,KAAKuB,MAAMC,GAAGxB,KAAKuB,MAAME,GAAG,GAAG,MAAM,QAC3CG,SAAS,IAETC,QAAQ,OAJZ,sBAKA,2BAAOC,GAAG,MAAMT,KAAK,KAAKU,SAAU/B,KAAKmB,aAAcD,MAAOlB,KAAKuB,MAAMC,GAAIQ,UAAW,SAAClB,GAAD,OAAK,EAAKD,YAAYC,IAAImB,KAAK,SAN3H,IAQI,2BAAOZ,KAAK,KAAKU,SAAU/B,KAAKmB,aAAcD,MAAOlB,KAAKuB,MAAME,GAAIO,UAAW,SAAClB,GAAD,OAAK,EAAKD,YAAYC,IAAImB,KAAK,SAC9G,uBAAGC,wBAAyB,CAACC,OAAOnC,KAAKuB,MAAMC,GAAGxB,KAAKuB,MAAME,MAC7D,qD,GA9BuB3B,a,GCvBDA,Y,gBCFjBsC,E,YACjB,aAAc,IAAD,8BACT,+CACKb,MAAQ,CACTc,KAAK,IAHA,E,iFAMO,IAAD,OACfC,IAAMC,IAAI,uDACLC,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACZ,EAAKrB,SAAS,CACViB,KAAMI,EAAIJ,KAAKO,c,+BAK3B,OACI,6BACI,wDACA,4BAEQ5C,KAAKuB,MAAMc,KAAKhC,KACZ,SAACC,EAAKuC,GAAN,OACI,wBAAIrC,IAAKqC,GACL,4BAAKvC,EAAKwC,aACV,2BAAIxC,EAAKyC,kB,GA1BRjD,aCOrCkD,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SA4CzCC,IAAMC,cACZ,MACA,CAAC,GAAK,OACN,QACAD,IAAMC,cACF,KACA,CAAC,GAAK,KACN,Y","file":"static/js/main.f9098321.chunk.js","sourcesContent":["import React,{Component,Fragment} from 'react';\r\n// 类定义组件\r\nexport default class ShowTime extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            time: new Date().toLocaleString()\r\n        }\r\n        // this.handleClick = this.handleClick.bind(this);\r\n        console.log('constructor',this.props.word);\r\n    }\r\n    componentDidMount(){\r\n        console.log('componentDidMount');\r\n        setTimeout(()=>{\r\n            console.log(1)\r\n            this.setState({\r\n                time: new Date().toLocaleString()\r\n            })\r\n        },1000)\r\n    }\r\n    shouldComponentUpdate(){\r\n        return true;\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getsnapshot');\r\n    }\r\n    componentDidUpdate(){\r\n        console.log('didupdate');\r\n    }\r\n    handleClick = (num,e)=>{\r\n        console.log(num,e);\r\n        console.log('点击成功');\r\n    }\r\n    divClick(num,e){\r\n        console.log(num,e);\r\n    }\r\n    render(){\r\n        console.log('render');\r\n        return (\r\n            <Fragment>\r\n                <div onClick={(ev)=>{this.handleClick(1,ev)}}>\r\n                    {this.state.time}</div>\r\n                <div onClick={this.divClick.bind(this,333)}>hello{this.props.word}</div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n// 默认导出，只能导出一次\r\n// export default ShowTime;\r\n\r\n// 命名导出,可写多个export\r\n// export {ShowTime};","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport default class Todoing extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>正在进行{this.props.a}</h1>\r\n                <ul className=\"list\">\r\n                    {\r\n                        this.props.todo.map((item,idx)=><li key={idx}>{item}----<button onClick={()=>{this.props.delTodo(idx)}}>删除</button></li>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nTodoing.propTypes = {\r\n    todo: PropTypes.array\r\n}\r\nTodoing.defaultProps = {\r\n    todo: [2,3,4],\r\n    a: 100\r\n}","import React, { Component } from 'react'\r\n//子组件---->父组件传递数据，调用子组件时往子组件传递一个函数\r\n// 子组件通过props调用该函数\r\n\r\n// 受控组件和非受控组件\r\n\r\n// 非受控组件\r\n// 代码简单、比较适用于一次性获取表单的值\r\n// export default class Todoinput extends Component {\r\n//     componentDidMount(){\r\n//         console.log(this.inp.value);\r\n//         // console.log(this);\r\n//     }\r\n//     search = ()=>{\r\n//         console.log(this.inp.value);\r\n//     }\r\n//     render(){\r\n//         return (<div>\r\n//                     <input ref={inp=>this.inp = inp} type=\"text\"/>\r\n//                     <button onClick={this.search}>查询</button>\r\n//                 </div>)\r\n//     }\r\n// }\r\n\r\n\r\n// 受控组件：value值被react的状态控制\r\n// 实时获取或处理输入的内容\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            n1: 0,\r\n            n2: 0\r\n        }\r\n    }\r\n    handleInput = (e)=>{\r\n        if(e.keyCode === 13){\r\n            this.props.addTodo(e.target.value);\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.name]: parseInt(e.target.value===''?0:e.target.value)\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <label style={{\r\n                    color:this.state.n1+this.state.n2>10?'red':'green',\r\n                    fontSize:50\r\n                    }} \r\n                    htmlFor=\"inp\">输入：</label>\r\n                <input id=\"inp\" name=\"n1\" onChange={this.handleChange} value={this.state.n1} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n                +\r\n                <input name=\"n2\" onChange={this.handleChange} value={this.state.n2} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n                <p dangerouslySetInnerHTML={{__html:this.state.n1+this.state.n2}}></p>\r\n                <button>查询</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Todoing from './Todoing';\r\nimport Todoinput from './Todoinput';\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo: [1,2,3]\r\n        }\r\n\r\n        // var arr = [1,2,{a:100}];\r\n        // 深拷贝\r\n        // var b = JSON.parse(JSON.stringify(arr));\r\n        // b[2].a = 200;\r\n        // console.log(arr);\r\n\r\n        // 对象的拷贝\r\n        var a= {a:100,b:200};\r\n        // var o = Object.assign({},a);\r\n        // console.log(o===a);\r\n        // console.log(o);\r\n        // Object.keys返回由属性名组成的一个数组\r\n        Object.keys(a).forEach((item)=>{\r\n            console.log(item);\r\n            console.log(a[item]);\r\n        })\r\n        // 尽量不用for in\r\n        // for(var item in a){\r\n        //     console.log(a);\r\n        // }\r\n    }\r\n    addItem = (msg)=>{\r\n        // this.state.todo.push(msg)\r\n        // console.log(this.state.todo)\r\n        this.setState({\r\n            todo: [...this.state.todo,msg]\r\n        })\r\n        console.log(msg);\r\n    }\r\n    delItem = (a)=>{\r\n        // this.state.todo.splice(a,1); //不要写\r\n        // 深拷贝\\浅拷贝\r\n        // 状态（state）：\r\n        // 1、不要直接改变、处理状态\r\n        var todo = [...this.state.todo];\r\n        todo.splice(a,1);\r\n        // 2、setState是异步的\r\n        this.setState(\r\n            {todo:todo}\r\n        )\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput addTodo={this.addItem}/>\r\n                <Todoing delTodo={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\nexport default class Request extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            data:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        Axios.get('https://api.apiopen.top/musicRankingsDetails?type=1')\r\n            .then((res)=>{\r\n                console.log(res);\r\n                this.setState({\r\n                    data: res.data.result\r\n                })\r\n            })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>请求接口</h1>\r\n                <ul>\r\n                    {\r\n                        this.state.data.map(\r\n                            (item,index)=>(\r\n                                <li key={index}>\r\n                                    <h2>{item.album_title}</h2>\r\n                                    <p>{item.author}</p>\r\n                                </li>\r\n                            )\r\n                        )\r\n                    }\r\n                    \r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport ShowTime from './ShowTime';\r\nimport Todolist from './Todolist/Todolist'\r\nimport Requset from './Request';\r\n// 组件交互\r\n// 父组件--->子组件：调用时在子组件上添加属性\r\n// 在子组件中通过props获取数据\r\nReactDOM.render(<Requset/>,document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n// 函数定义组件（无生命周期函数）\r\n// 当只是渲染结构时\r\n// function Todo(props){\r\n//     return (\r\n//         <div>\r\n//             {/* 条件渲染 */}\r\n//             {props.list.length>=6?<h1>todo</h1>:''}\r\n//             {props.list.length>=5 && <h1>todo</h1>}\r\n//             <ul>\r\n//                 {/* 循环渲染 */}\r\n//                 {\r\n//                     props.list.map(\r\n//                         (item,index)=> index%2 === 0&&<li key={item}>{item}</li>\r\n//                     )\r\n//                 }\r\n//             </ul>\r\n//         </div>\r\n//     )\r\n// }\r\n// var item = [1,2,3,4,5];\r\n// ReactDOM.render(<Todo list={item}/>,document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n// react元素创建后不可改变\r\n// function tick(){\r\n//     var e = <div>\r\n//                 <p>当前时间</p>\r\n//                 <p>当前时间</p>\r\n//                 <h1>{new Date().toLocaleString()}</h1>;\r\n//             </div>\r\n//     ReactDOM.render(e,document.getElementById('root'));\r\n// }\r\n// tick();\r\n// setInterval(tick,1000);\r\n\r\n// jsx表达式会被react转成一个对象，类似下面声明的obj对象\r\nvar ele = React.createElement(\r\n    'div',\r\n    {'id':'box'},\r\n    'hello',\r\n    React.createElement(\r\n        'h1',\r\n        {'id':'h'},\r\n        'react'\r\n    )\r\n);\r\nvar obj = {\r\n    type: 'div',\r\n    props: {\r\n        id: 'box',\r\n        class: 'box',\r\n        children: ['hello',{\r\n            type: 'h1',\r\n            props: {\r\n                id: 'h',\r\n                class: 'h',\r\n                children: ['react']\r\n            }\r\n        }]\r\n    }\r\n}\r\n\r\n// 自己声明render函数，实现页面渲染\r\nfunction render(obj,container){\r\n    var {type,props} = obj;\r\n    // 文档碎片\r\n    var fr = document.createDocumentFragment();\r\n\r\n    var ele = document.createElement(type);\r\n    for(var item in props){\r\n        if(item === 'class'){\r\n            ele.className = props[item];\r\n        }else if(item === 'children'){\r\n            for(var i=0;i<props[item].length;i++){\r\n                if(typeof props[item][i] === 'object'){\r\n                    render(props[item][i],ele);\r\n                }else{\r\n                    var txt = document.createTextNode(props[item][i]);\r\n                    ele.appendChild(txt);\r\n                }\r\n            }\r\n        }else{\r\n            ele[item] = props[item];\r\n        }\r\n    }\r\n    fr.appendChild(ele);\r\n    container.appendChild(fr);\r\n}\r\n// render(obj,document.getElementById('root'));\r\n\r\n// 注意以下性能问题及优化方法\r\n\r\n// 加载html文件、浏览器解析html生成DOM树\r\n// link加载css文件、解析css规则、和DOM树结合生成render tree、浏览器渲染引擎渲染render tree\r\n\r\n// 页面回流（重排）：内容改变、大小改变、结构改变\r\n// 页面重绘：把字体颜色、背景颜色等样式改变\r\n\r\n// 1、node.offsetLeft、node.offsetWidth等慎用\r\n// var root = document.getElementById('root');\r\n// var width = root.offsetWidth;\r\n// setInterval(function(){\r\n//     width += 1\r\n//     root.style.width = width + 'px';\r\n// },100)\r\n\r\n// display、width、height、font-size等会引起页面回流\r\n// document.body.style.width = '100px';\r\n// document.body.style.height = '100px';\r\n// 2、声明一个css的一个类\r\n// .change{\r\n//     width: 100px;\r\n//     height: 100px;\r\n// }\r\n// document.body.className = 'change';\r\n\r\n// 3、对节点的操作先用变量代替\r\n// console.time('a');\r\n// var str = '';\r\n// for(var i=0;i<1000;i++){\r\n//     str += '<li>'+i+'</li>';\r\n// }\r\n// document.body.innerHTML = str;\r\n// console.timeEnd('a');\r\n// 4、文档碎片的概念\r\n\r\n\r\n"],"sourceRoot":""}